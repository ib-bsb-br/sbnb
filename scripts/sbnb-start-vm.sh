#!/bin/bash

# This script is used to start a virtual machine (VM) with specific configurations.
# The configurations can be provided through a JSON file passed as an argument to the script,
# or through environment variables if no configuration file is provided.
# The script sets up the VM with the specified number of virtual CPUs, memory, hostname,
# and other configurations such as attaching GPUs or PCIe devices, and enabling confidential computing.
# It uses a pre-downloaded VM image located at /root/noble-server-cloudimg-amd64.img,
# prepares the cloud-init configuration, and starts the VM using QEMU.

# Example VM JSON configuration:
# {
#   "vcpu": 2,                       # Number of virtual CPUs
#   "mem": "4G",                     # Amount of memory
#   "tskey": "your_tailscale_key",   # Tailscale authentication key
#   "hostname": "custom-hostname",   # Hostname for the VM (optional, will be autogenerated if not provided)
#   "attach_gpus": false,            # Whether to attach GPUs (all available GPUs in the system will be attached if true)
#   "attach_pcie_devices": [         # List of PCIe devices to attach
#     "0000:00:1c.0",
#     "0000:00:1d.0"
#   ],
#   "confidential_computing": false, # Whether to enable confidential computing
#   "image_size": "10G"              # Desired final size of the VM image (e.g. "10G", optional, defaults to "10G")
# }

set -euxo pipefail

# Define constants
STORAGE="/mnt/sbnb-data"

# Global-like variables that will be set by load_configuration or prepare_vm.
# Explicitly listing them here for clarity, though they are assigned within functions.
VCPU=""
MEM=""
TSKEY=""
HOSTNAME=""
ATTACH_GPUS=""
ATTACH_PCIE_DEVICES=()
CONFIDENTIAL_COMPUTING=""
IMAGE_PATH="" # Path to the source VM image
IMAGE_SIZE=""
BOOT_IMAGE="" # Path to the qcow2 image for the VM
SEED_IMAGE="" # Path to the cloud-init seed image

# Usage message
usage() {
  echo "Usage: $0 [-f <path_to_json_config>]"
  exit 1
}

# Install required packages
install_packages() {
  apt-get update && apt-get install -y jq xxd pciutils curl genisoimage qemu-utils
}

# Parse arguments
parse_arguments() {
  CONFIG_FILE=""
  while getopts "f:h" opt; do
    case ${opt} in
      f) CONFIG_FILE=${OPTARG} ;;
      h) usage ;;
      *) usage ;;
    esac
  done
}

# Load configuration
load_configuration() {
  local CONFIG_VCPU="" CONFIG_MEM="" CONFIG_TSKEY="" CONFIG_HOSTNAME="" CONFIG_ATTACH_GPUS="" CONFIG_CONFIDENTIAL_COMPUTING="" CONFIG_IMAGE_SIZE=""
  local -a CONFIG_ATTACH_PCIE_DEVICES=()

  if [ -n "${CONFIG_FILE}" ]; then
    if [ ! -f "${CONFIG_FILE}" ]; then
      echo "Error: Configuration file ${CONFIG_FILE} not found." >&2
      exit 1
    fi
    echo "Configuration file provided. Parsing JSON configuration."
    CONFIG_VCPU=$(jq -r '.vcpu // empty' "${CONFIG_FILE}")
    CONFIG_MEM=$(jq -r '.mem // empty' "${CONFIG_FILE}")
    CONFIG_TSKEY=$(jq -r '.tskey // empty' "${CONFIG_FILE}")
    CONFIG_HOSTNAME=$(jq -r '.hostname // empty' "${CONFIG_FILE}")
    CONFIG_ATTACH_GPUS=$(jq -r '.attach_gpus // empty' "${CONFIG_FILE}")
    mapfile -t CONFIG_ATTACH_PCIE_DEVICES < <(jq -r '.attach_pcie_devices // empty | .[]' "${CONFIG_FILE}")
    CONFIG_CONFIDENTIAL_COMPUTING=$(jq -r '.confidential_computing // empty' "${CONFIG_FILE}")
    # image_url is no longer read from config for image sourcing
    CONFIG_IMAGE_SIZE=$(jq -r '.image_size // empty' "${CONFIG_FILE}")
  else
    echo "No configuration file provided. Using environment variables or defaults."
  fi

  VCPU=${SBNB_VM_VCPU:-${CONFIG_VCPU:-2}}
  MEM=${SBNB_VM_MEM:-${CONFIG_MEM:-"4G"}}
  TSKEY=${SBNB_VM_TSKEY:-${CONFIG_TSKEY:-""}}
  HOSTNAME=${SBNB_VM_HOSTNAME:-${CONFIG_HOSTNAME:-""}}
  ATTACH_GPUS=${SBNB_VM_ATTACH_GPUS:-${CONFIG_ATTACH_GPUS:-false}}

  if [ -n "${SBNB_VM_ATTACH_PCIE_DEVICES}" ]; then
    # shellcheck disable=SC2206 # Intentional word splitting for env var
    ATTACH_PCIE_DEVICES=(${SBNB_VM_ATTACH_PCIE_DEVICES})
  elif [ ${#CONFIG_ATTACH_PCIE_DEVICES[@]} -gt 0 ]; then
    ATTACH_PCIE_DEVICES=("${CONFIG_ATTACH_PCIE_DEVICES[@]}")
  else
    ATTACH_PCIE_DEVICES=()
  fi

  CONFIDENTIAL_COMPUTING=${SBNB_VM_CONFIDENTIAL_COMPUTING:-${CONFIG_CONFIDENTIAL_COMPUTING:-false}}
  
  # Set fixed IMAGE_PATH to the pre-downloaded local image
  IMAGE_PATH="/root/noble-server-cloudimg-amd64.img"
  IMAGE_SIZE=${SBNB_VM_IMAGE_SIZE:-${CONFIG_IMAGE_SIZE:-"10G"}}

  if [ -z "${HOSTNAME}" ]; then
    HOSTNAME="sbnb-vm-$(xxd -l6 -p /dev/random)"
  fi

  if ! command -v qemu-img &> /dev/null; then
    echo "qemu-img command not found. This script requires qemu-utils." >&2
    echo "Please ensure qemu-utils is installed (e.g., 'apt-get install qemu-utils')." >&2
    # Attempting to install it was in the previous version, but it's better to make it a prerequisite or a manual step if it fails.
    # If install_packages ran, it should be there. This is a fallback check.
    exit 1
  fi
}

# Prepare VM folder and cloud-init configuration
prepare_vm() {
  VM_FOLDER="${STORAGE}/images/${HOSTNAME}"
  # These paths are now effectively global after this function runs
  BOOT_IMAGE="${VM_FOLDER}/${HOSTNAME}.qcow2"
  SEED_IMAGE="${VM_FOLDER}/seed-${HOSTNAME}.iso"

  mkdir -p "${VM_FOLDER}"

  cat > "${VM_FOLDER}/user-data" << EOF
#cloud-config
runcmd:
  - hostname ${HOSTNAME}
  - echo ${HOSTNAME} > /etc/hostname
  - curl -fsSL https://tailscale.com/install.sh | sh
  - tailscale up --ssh --auth-key=${TSKEY}
EOF

  touch "${VM_FOLDER}/meta-data"

  genisoimage -output "${SEED_IMAGE}" -volid cidata -joliet -rock "${VM_FOLDER}/user-data" "${VM_FOLDER}/meta-data"
  if [ $? -ne 0 ]; then
    echo "Error: Failed to create seed image ${SEED_IMAGE}." >&2
    exit 1
  fi
}

# Prepare VM image from local source
prepare_image() {
  echo "Preparing VM image using local source: ${IMAGE_PATH}"
  
  if [ ! -f "${IMAGE_PATH}" ]; then
    echo "Error: Source VM image ${IMAGE_PATH} not found." >&2
    exit 1
  fi

  echo "Copying source image from ${IMAGE_PATH} to ${BOOT_IMAGE}..."
  cp "${IMAGE_PATH}" "${BOOT_IMAGE}"
  if [ $? -ne 0 ]; then
    echo "Error: Failed to copy VM image from ${IMAGE_PATH} to ${BOOT_IMAGE}." >&2
    exit 1
  fi
  
  echo "Resizing VM image ${BOOT_IMAGE} to ${IMAGE_SIZE}..."
  qemu-img resize "${BOOT_IMAGE}" "${IMAGE_SIZE}"
  if [ $? -ne 0 ]; then
    echo "Error: Failed to resize VM image ${BOOT_IMAGE} to ${IMAGE_SIZE}." >&2
    exit 1
  fi
  echo "VM image prepared successfully at ${BOOT_IMAGE}."
}

# Map Nvidia GPU to vfio-pci if required
map_gpus() {
  if [ "${ATTACH_GPUS}" = true ]; then
    for gpu in $(lspci -nn | grep -i 10de | awk '{print $1}'); do
      vendor_device_id=$(lspci -n -s "${gpu}" | awk '{print $3}')
      vendor_id=$(echo "${vendor_device_id}" | cut -d: -f1)
      device_id=$(echo "${vendor_device_id}" | cut -d: -f2)
      echo "${vendor_id} ${device_id}" > /sys/bus/pci/drivers/vfio-pci/new_id || true # Allow failure if already bound
    done
  fi
}

# Map PCIe devices to vfio-pci
map_pcie_devices() {
  for pcie in "${ATTACH_PCIE_DEVICES[@]}"; do
    if [ -z "${pcie}" ]; then
      continue
    fi
    vendor_device_id=$(lspci -n -s "${pcie}" | awk '{print $3}')
    vendor_id=$(echo "${vendor_device_id}" | cut -d: -f1)
    device_id=$(echo "${vendor_device_id}" | cut -d: -f2)
    echo "${vendor_id} ${device_id}" > /sys/bus/pci/drivers/vfio-pci/new_id || true # Allow failure if already bound
  done
}

# Start the VM
start_vm() {
  mkdir -p /usr/qemu-svsm/etc/qemu
  echo "allow all" > /usr/qemu-svsm/etc/qemu/bridge.conf

  mac_address="52:54:00:$(dd if=/dev/urandom bs=512 count=1 2>/dev/null \
                             | md5sum \
                             | sed -E 's/^(..)(..)(..).*$/\1:\2:\3/')"

  QEMU_CMD="/usr/qemu-svsm/bin/qemu-system-x86_64 \
    -enable-kvm \
    -cpu EPYC-Milan-v2 \
    -smp ${VCPU} \
    -drive file=${BOOT_IMAGE},if=none,id=disk0,format=qcow2,snapshot=off \
    -device virtio-scsi-pci,id=scsi0,disable-legacy=on,iommu_platform=on \
    -device scsi-hd,drive=disk0,bootindex=0 \
    -cdrom ${SEED_IMAGE} \
    -nographic"

  QEMU_CMD+=" -device virtio-net-pci,netdev=br0,mac=${mac_address} -netdev bridge,id=br0,br=br0"

  if [ "${CONFIDENTIAL_COMPUTING}" = true ]; then
    QEMU_CMD+=" -machine q35,confidential-guest-support=sev0,memory-backend=ram1,igvm-cfg=igvm0 \
    -object memory-backend-memfd,id=ram1,size=${MEM},share=true,prealloc=false,reserve=false \
    -object sev-snp-guest,id=sev0,cbitpos=51,reduced-phys-bits=1"
  else
    QEMU_CMD+=" -machine q35 -m ${MEM} -bios /usr/share/ovmf/OVMF.fd"
  fi

  if [ "${ATTACH_GPUS}" = true ]; then
    for gpu in $(lspci -nn | grep -i 10de | awk '{print $1}'); do
      QEMU_CMD+=" -device vfio-pci,host=${gpu}"
    done
  fi

  for pcie in "${ATTACH_PCIE_DEVICES[@]}"; do
    if [ -z "${pcie}" ]; then
      continue
    fi
    QEMU_CMD+=" -device vfio-pci,host=${pcie}"
  done

  CLEANER_SCRIPT="sbnb-vm-cleaner.sh"
  DELAY=30
  if [ -x "$(command -v ${CLEANER_SCRIPT})" ]; then
    echo "Starting ${CLEANER_SCRIPT} in background with a ${DELAY}s delay."
    (sleep ${DELAY} && ${CLEANER_SCRIPT}) &
  fi

  echo "Starting VM with command:"
  # For debugging, print the command. Use printf for safer expansion if needed.
  # Consider using an array for QEMU_CMD to avoid issues with word splitting if eval is removed.
  echo "${QEMU_CMD}" 
  eval "${QEMU_CMD}"
}

main() {
  parse_arguments "$@"
  install_packages
  load_configuration
  prepare_vm 
  prepare_image 
  map_gpus
  map_pcie_devices
  start_vm
}

main "$@"
